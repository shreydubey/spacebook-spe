{"ast":null,"code":"import axios from 'axios';\nimport pino from 'pino';\nimport { upcoming_launch_url, searched_url1, searched_url2 } from '../api';\nimport { recent_launch_reversing_required_url } from '../api';\nimport { REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY } from '../apikey';\nconst logger = pino({\n  level: 'info',\n  timestamp: () => `,\"time\":${new Date().toISOString()}`\n}); //action creator \n//for upcoming launches\n\nexport const loadUpcomingLaunch = () => async dispatch => {\n  // fetch axios\n  const upcomingLaunchData = await axios.get(`${upcoming_launch_url()}+key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\n  /*\r\n  //console.log(upcomingLaunchData.data.result);\r\n  const upcomingProviderNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.provider.name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n  //console.log(upcomingProviderNames);\r\n  const upcomingMissionNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.missions[0].name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n  //console.log(upcomingMissionNames);\r\n  const upcomingVechileNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.vehicle.name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n  //console.log(upcomingVechileNames);\r\n  const names1 = upcomingProviderNames.map((e,i) => e +' '+ upcomingVechileNames[i]);\r\n  //console.log(names1);\r\n  const  names2 = names1.map((e,i) => e +' '+ upcomingMissionNames[i]);\r\n  //console.log(names2);\r\n  //getting upcoming images\r\n  */\n\n  dispatch({\n    type: \"UPCOMING\",\n    payload: {\n      upcoming: upcomingLaunchData.data.result\n    }\n  });\n  logger.info(\"Recieved upcoming launch data from API\");\n}; //for recent launches\n\nexport const loadRecentLaunch = () => async dispatch => {\n  // fetch axios\n  const recentLaunchData = await axios.get(`${recent_launch_reversing_required_url()}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\n  const actualRecentLaunchData = recentLaunchData.data.result.reverse();\n  console.log(actualRecentLaunchData);\n  const recentLaunchDataIs = [];\n  let len = actualRecentLaunchData.length;\n\n  for (let i = 0; i < len; i++) {\n    let g1 = new Date(actualRecentLaunchData[i].win_open);\n    let g2 = new Date();\n\n    if (actualRecentLaunchData[i].win_open !== null && (actualRecentLaunchData[i].result !== -1 || g1.getTime() < g2.getTime())) {\n      recentLaunchDataIs.push(actualRecentLaunchData[i]);\n    }\n  } //console.log(recentLaunchDataIs);\n\n\n  dispatch({\n    type: \"RECENT\",\n    payload: {\n      recent: recentLaunchDataIs\n    }\n  });\n  logger.info(\"Recieved recent launch data from API\");\n}; //for searched launches\n\nexport const loadSearchedLaunch = text => async dispatch => {\n  // fetch axios\n  const searchedLaunchData1 = await axios.get(`${searched_url1(text)}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\n  const searchedLaunchData2 = await axios.get(`${searched_url2(text)}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\n  console.log(searchedLaunchData2);\n  const resultSearched = [...searchedLaunchData1.data.result, ...searchedLaunchData2.data.result];\n  dispatch({\n    type: \"SEARCHED\",\n    payload: {\n      searched: resultSearched\n    }\n  });\n  logger.info(\"Recieved searched launch data from API\");\n};","map":{"version":3,"sources":["/Users/sherydubey/spe_major_project/frontend/src/actions/launchAction.js"],"names":["axios","pino","upcoming_launch_url","searched_url1","searched_url2","recent_launch_reversing_required_url","REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY","logger","level","timestamp","Date","toISOString","loadUpcomingLaunch","dispatch","upcomingLaunchData","get","process","env","type","payload","upcoming","data","result","info","loadRecentLaunch","recentLaunchData","actualRecentLaunchData","reverse","console","log","recentLaunchDataIs","len","length","i","g1","win_open","g2","getTime","push","recent","loadSearchedLaunch","text","searchedLaunchData1","searchedLaunchData2","resultSearched","searched"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport pino from 'pino'\r\nimport {upcoming_launch_url,searched_url1,searched_url2} from '../api';\r\nimport {recent_launch_reversing_required_url} from '../api';\r\nimport { REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY} from '../apikey'\r\n\r\n\r\nconst logger = pino({\r\n    level: 'info',\r\n    timestamp: () => `,\"time\":${new Date().toISOString()}`\r\n  \r\n  });\r\n\r\n//action creator \r\n\r\n//for upcoming launches\r\nexport const loadUpcomingLaunch = () => async (dispatch) =>{\r\n    // fetch axios\r\n    const upcomingLaunchData = await axios.get(`${upcoming_launch_url()}+key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\r\n\r\n    /*\r\n    //console.log(upcomingLaunchData.data.result);\r\n    const upcomingProviderNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.provider.name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n    //console.log(upcomingProviderNames);\r\n    const upcomingMissionNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.missions[0].name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n    //console.log(upcomingMissionNames);\r\n    const upcomingVechileNames = upcomingLaunchData.data.result.map(eachLaunch => eachLaunch.vehicle.name.replace(/[^a-zA-Z0-9 ]/g, ' '));\r\n    //console.log(upcomingVechileNames);\r\n    const names1 = upcomingProviderNames.map((e,i) => e +' '+ upcomingVechileNames[i]);\r\n    //console.log(names1);\r\n    const  names2 = names1.map((e,i) => e +' '+ upcomingMissionNames[i]);\r\n    //console.log(names2);\r\n    //getting upcoming images\r\n    */\r\n    \r\n    dispatch({\r\n        type : \"UPCOMING\",\r\n        payload : {\r\n            upcoming : upcomingLaunchData.data.result,\r\n\r\n        }\r\n    });\r\n\r\n    logger.info(\"Recieved upcoming launch data from API\")\r\n}\r\n\r\n//for recent launches\r\nexport const loadRecentLaunch = () => async (dispatch) =>{\r\n    // fetch axios\r\n    const recentLaunchData = await axios.get(`${recent_launch_reversing_required_url()}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\r\n    const actualRecentLaunchData = recentLaunchData.data.result.reverse();\r\n    console.log( actualRecentLaunchData);\r\n    const recentLaunchDataIs = [];\r\n    let len = actualRecentLaunchData.length;\r\n    for(let i = 0;i < len;i++){\r\n        let g1 = new Date(actualRecentLaunchData[i].win_open);\r\n        let g2 = new Date();\r\n        if ((actualRecentLaunchData[i].win_open !== null) && ((actualRecentLaunchData[i].result !== -1)|| (g1.getTime() < g2.getTime()))){\r\n        recentLaunchDataIs.push(actualRecentLaunchData[i]);\r\n        }\r\n    }\r\n    //console.log(recentLaunchDataIs);\r\n\r\n    dispatch({\r\n        type : \"RECENT\",\r\n        payload : {\r\n            recent : recentLaunchDataIs,\r\n        }\r\n    });\r\n\r\n    logger.info(\"Recieved recent launch data from API\")\r\n}\r\n\r\n\r\n//for searched launches\r\nexport const loadSearchedLaunch = (text) => async (dispatch) =>{\r\n    // fetch axios\r\n    const searchedLaunchData1 = await axios.get(`${searched_url1(text)}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\r\n    const searchedLaunchData2 = await axios.get(`${searched_url2(text)}&key=${process.env.REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY || REACT_APP_ROCKET_LAUNCH_LIVE_API_KEY}`);\r\n    console.log(searchedLaunchData2);\r\n    const resultSearched = [...searchedLaunchData1.data.result, ...searchedLaunchData2.data.result];\r\n    dispatch({\r\n        type : \"SEARCHED\",\r\n        payload : {\r\n            searched : resultSearched,\r\n        }\r\n    });\r\n\r\n    logger.info(\"Recieved searched launch data from API\")\r\n}"]},"metadata":{},"sourceType":"module"}